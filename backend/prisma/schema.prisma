// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int    @id @default(autoincrement())
  username     String @unique
  displayName  String @map("display_name")
  /// @TypeGraphQL.omit(output: true, input: true)
  passwordHash String @map("password_hash")

  createdTasks Task[]
  comments     Comment[]

  organizations Organization[] @relation("MemberOf")
  assignedTasks Task[]         @relation("AssignedTo")
}

model Organization {
  id   Int    @id @default(autoincrement())
  name String @unique

  projects Project[]

  users User[] @relation("MemberOf")
}

model Project {
  id             Int          @id @default(autoincrement())
  name           String
  organization   Organization @relation(fields: [organizationId], references: [id])
  /// @TypeGraphQL.omit(output: true, input: true)
  organizationId Int          @map("organiztaion_id")

  labels Label[]
  tasks  Task[]

  @@unique([organizationId, name])
}

model Task {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  status    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  author    User     @relation(fields: [authorId], references: [id])
  /// @TypeGraphQL.omit(output: true, input: true)
  authorId  Int      @map("user_id")
  project   Project  @relation(fields: [projectId], references: [id])
  /// @TypeGraphQL.omit(output: true, input: true)
  projectId Int

  comments Comment[]

  blockedBy Task[]  @relation("BlockedBy")
  blocking  Task[]  @relation("BlockedBy")
  users     User[]  @relation("AssignedTo")
  labels    Label[] @relation("AttachedWith")
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String?
  commentedAt DateTime @default(now()) @map("commented_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  task        Task     @relation(fields: [taskId], references: [id])
  /// @TypeGraphQL.omit(output: true, input: true)
  taskId      Int
  author      User     @relation(fields: [authorId], references: [id])
  /// @TypeGraphQL.omit(output: true, input: true)
  authorId    Int
}

model Label {
  id        Int     @id @default(autoincrement())
  name      String
  color     String
  project   Project @relation(fields: [projectId], references: [id])
  /// @TypeGraphQL.omit(output: true, input: true)
  projectId Int     @map("project_id")

  tasks Task[] @relation("AttachedWith")

  @@unique([projectId, name])
}
